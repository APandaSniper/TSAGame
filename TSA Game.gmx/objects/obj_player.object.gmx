<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_white</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Create Event

///Initialize Variables
grav = 0.35; //Gravity
hsp = 0; //Horizontal Speed
vsp = 0; //Vertical Speed
jumpspeed = 7;
movespeed = 7; //The speed of the character
image_speed = 0; //Don't cycle through the sprite animation

//Creation
if !instance_exists(obj_initiate) instance_create(0,0,obj_initiate); //If obj_initiate does not exist then create it

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Step Event

//Variables
key_left = -keyboard_check(ord("A"));
key_right = keyboard_check(ord("D"));
key_jump = keyboard_check(ord("W"));
key_color_inc = keyboard_check_pressed(vk_right);
key_color_dec = -keyboard_check_pressed(vk_left);
color = key_color_inc + key_color_dec; 
var i = 0; //A one-way-flag variable just for this script and nothing else of this object

//Movement
move = key_left + key_right; //Tell how the player's input effects movement
if (vsp &lt; 10) vsp += grav;
if global.player_move == true hsp = move * movespeed; //Move left or right
if (place_meeting(x,y+1,obj_barrier)) //If there is a barrier underneath the object...
{
    vsp = key_jump * -jumpspeed; //Allow them to jump if they choose
}

//Horizontal Collision
if (place_meeting(x+hsp,y,obj_barrier)) //If to left or right is barrier...
{
    while (!place_meeting(x+sign(hsp),y,obj_barrier)) //While no barrier left or right by one pixel...
    {
        x += sign(hsp); //Move closer by one pixel to the barrier
    }
    hsp = 0; //When object is next to barrrier, stop moving closer
}
x += hsp; //else if no barrier, move like normal

//Vertical Collision
if (place_meeting(x,y+vsp,obj_barrier)) //If above or below is barrier object...
{
    while(!place_meeting(x,y+sign(vsp),obj_barrier)) //While no barrier above or below by one pixel...
    {
        y += sign(vsp); //Move closer by one pixel to the barrier
    }
    vsp = 0; //When object right over or below barrier, stop moving closer
}
y += vsp; //else if no barrier, jump like normal

//Switch Colors

global.color += color;
if global.color &gt; 5 global.color = 0;
else if global.color &lt; 0 global.color = 5;

//Color Change
if global.baw == 0 sprite_index = spr_player_black; //if the dominant color is white use black player sprites
else sprite_index = spr_player_white; //else if the dominant is black use white player sprites
image_index = global.color; //The sprite sub-image equals the current color value
image_speed = 0; //Don't cycle through the sprite animation


//Barrier Color Change
if (place_meeting(x,y+1,obj_barrier)) global.baw = 0;
else global.baw = 1;

//Set Background Color
if global.baw == 0 background_color = c_white; //If dominant color is white, set the rooms' background color to white
else background_color = c_black; //Else if the dominant color is black, set the room's backgruond color to black
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_portal">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Collision Event (collision with obj_portal)

if obj_portal.locked == false //If the portal is unlocked...
{
room_goto_next(); //Go to the next room
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_spike">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Collision Event (collision with obj_spike)

room_restart(); //Restart the room

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
